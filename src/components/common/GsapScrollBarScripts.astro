---
---

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  import { CSSPlugin } from 'gsap/CSSPlugin';
  import Lenis from '@studio-freight/lenis';

  const lenis = new Lenis({ infinite: false, duration: 1.5 });

  function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }

  requestAnimationFrame(raf);
  gsap.registerPlugin(CSSPlugin);
  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', () => {
    const esfera = document.getElementById('esfera');
    const portal = document.getElementById('portal');

    if (!esfera) {
      console.error('No se pudo encontrar la esfera o el filtro de desenfoque en el DOM.');
      return;
    }

    // Primero, realizar la animación inicial después de 750ms
    gsap.to(esfera, {
      duration: 0.25,
      opacity: 1,
    });
    gsap.to(esfera, {
      scale: 0.5,
      duration: 0.75,
      delay: 0.75,
      opacity: 1,
      border: '2px solid #fff',
      background: 'transparent',
      ease: 'Expo.easeOut',
    });

    document.addEventListener('mousemove', moverEsfera);
    function moverEsfera(e) {
      const esferaRect = esfera && esfera.getBoundingClientRect();

      if (esferaRect) {
        gsap.to(esfera, {
          x: e.clientX,
          y: e.clientY,
          duration: 0.45,
          delay: 0.01,
          ease: 'Expo.easeOut',
        });
      }
    }
    //HOVER
    const elementsToHover = document.querySelectorAll('a, button');

    elementsToHover.forEach((el) => {
      el.addEventListener('mouseenter', onElementHover);
      el.addEventListener('mouseleave', onElementMouseLeave);
    });

    function onElementHover(e) {
      if (!e.target.classList.contains('NoMiceHover')) {
        gsap.to(esfera, {
          scale: 0.75,
          background: '#ffffff50',
          border: '0px',
          duration: 0.5,
          ease: 'Expo.easeOut',
        });
      }
    }

    function onElementMouseLeave(e) {
      if (!e.target.classList.contains('NoMiceHover')) {
        gsap.to(esfera, {
          scale: 0.5,
          background: 'transparent',
          border: '2px solid #fff',
          duration: 0.5,
          ease: 'Expo.easeOut',
        });
      }
    }

    // THE 404 PAGE IS A LIE
    if (portal) {
      const stickman = document.getElementById('stickman');
      portal.addEventListener('mouseenter', () => {
        gsap.fromTo(
          esfera,
          {
            scale: 0.5,
            rotate: '36deg',
          },
          {
            border: '4px solid #ff9142',
            boxShadow: '0px 0px 75px 0px #de5f03, inset 0px 0px 35px 1px #ff6e00',
            skewY: '30deg',
            scale: 0.9,
            duration: 0.3,
            ease: 'Expo.easeOut',
          }
        );
        gsap.set(stickman, {
          display: 'flex',
        });
      });
      portal.addEventListener('mouseout', () => {
        gsap.to(esfera, {
          skewY: '0deg',
          scale: 0.5,
          duration: 0.3,
          border: '2px solid #fff',
          boxShadow: 'unset',
          background: 'transparent',
          ease: 'Expo.easeOut',
        });
        gsap.set(stickman, {
          display: 'none',
        });
      });
    }
    // Agrega un evento 'mousemove' al documento para seguir la posición del ratón
  });

  /*-----------------------*/
  /*----LOADING SCREEN---- */
  /*-----------------------*/
  function animateLoadingText() {
    const loadingTextContainer = document.getElementById('loading-text-container');

    if (loadingTextContainer) {
      // Coloca el contenedor en el centro
      loadingTextContainer.style.transform = 'translateY(0%)';

      // Animación de abajo hacia arriba para ocultar el texto
      gsap.to(loadingTextContainer, {
        y: '-100%',
        duration: 0.75,
        delay: 0.25,
        ease: 'expo.inOut',
        onComplete: () => {
          loadingTextContainer.remove();
        },
      });
    }
  }
  document.addEventListener('DOMContentLoaded', animateLoadingText);

  const navGlow = document.querySelector('#navGlow');
  const navLinks = document.querySelectorAll('#header nav a');

  /*-----------------------*/
  /*------ NAV MENU ------ */
  /*-----------------------*/
  function getSectionIdsFromNavLinks() {
    return Array.from(navLinks)
      .map((link) => {
        const href = link.getAttribute('href');
        return href ? href.replace('#', '') : '';
      })
      .filter(Boolean); // Este filtro eliminará cualquier valor vacío
  }
  const sectionIDs = getSectionIdsFromNavLinks();

  function isVisible(el: Element): boolean {
    const rect = el.getBoundingClientRect();
    const windowHeight = window.innerHeight || document.documentElement.clientHeight;
    const isInView = rect.top <= windowHeight && rect.top + rect.height >= 0;
    return isInView;
  }

  function updateNavGlow() {
    let activeSectionIndex: number | null = null;

    for (let i = 0; i < sectionIDs.length; i++) {
      const element = document.getElementById(sectionIDs[i]);
      if (element && isVisible(element)) {
        activeSectionIndex = i;
        break;
      }
    }

    let navGlowPosition;

    switch (activeSectionIndex) {
      case 0:
        navGlowPosition = 1;
        break;
      case 1:
        navGlowPosition = 20;
        break;
      case 2:
        navGlowPosition = 46;
        break;
      case 3:
        navGlowPosition = 72;
        break;
      default:
        navGlowPosition = 1;
        return;
    }

    gsap.to(navGlow, {
      left: `${navGlowPosition}%`,
      duration: 0.5,
      overwrite: true,
      ease: 'Expo.easeOut',
    });

    navLinks.forEach((link, index) => {
      if (index === activeSectionIndex) {
        gsap.to(link, {
          color: '#fff',
          scale: 1.05,
          delay: 0.005,
          duration: 0.1,
          overwrite: true,
          ease: 'Expo.easeOut',
        });
      } else {
        gsap.to(link, {
          clearProps: 'all',
          duration: 0.1,
          ease: 'expo.in',
        });
      }
    });
  }

  const sbutton = document.getElementById('sbutton');
  const scard = document.getElementById('scard');
  let isActive = false;
  if (sbutton) {
    sbutton.addEventListener('click', () => {
      if (!isActive) {
        gsap.to(scard, {
          duration: 1,
          autoAlpha: 1,
          y: 0,
          ease: 'Expo.easeOut',
        });
        isActive = true;
      } else {
        gsap.to(scard, {
          duration: 0.75,
          autoAlpha: 0,
          y: 100,
          ease: 'Expo.easeOut',
        });
        isActive = false;
      }
    });
  }
  window.addEventListener('scroll', updateNavGlow);

  document.addEventListener('DOMContentLoaded', () => {
    const elementsToAnimate: HTMLElement[] = Array.from(document.querySelectorAll('.animate-on-scroll'));

    elementsToAnimate.forEach((element: HTMLElement) => {
      const delay = element.getAttribute('data-delay') || '0';
      const easing = element.getAttribute('data-easing') || 'Expo.easeOut';
      const duration = element.getAttribute('data-duration') || '2.5';
      const type = element.getAttribute('data-type') || 'simple';

      let animationSettings = {};

      switch (type) {
        case 'simple':
          animationSettings = {
            opacity: 0,
            y: 50,
          };
          break;
        case 'zoomReversed':
          animationSettings = {
            opacity: 0,
            scale: 1.5,
          };
          break;
        case 'zoomSmall':
          animationSettings = {
            opacity: 0,
            scale: 0.9,
          };
          break;
      }

      gsap.from(element, {
        ...animationSettings,
        duration: parseFloat(duration),
        delay: parseFloat(delay),
        ease: easing,
        onStart: () => {
          element.style.visibility = 'visible';
        },
        scrollTrigger: {
          trigger: element,
          once: true,
          start: 'top 100%',
          // markers: true,

          onToggle: (self) => {
            if (!self.isActive) {
              const index = elementsToAnimate.indexOf(element);
              if (index > -1) {
                elementsToAnimate.splice(index, 1);
              }
            }
          },
        },
      });
    });
  });

  window.addEventListener('DOMContentLoaded', () => {
    const heroElementsToAnimate = document.querySelectorAll('.animate-on-scrollHero');

    heroElementsToAnimate.forEach((element, index) => {
      const delay = 0.65 + index * 0.15;
      gsap.from(element, {
        duration: 2.25,
        autoAlpha: 0,
        y: 100,
        delay: delay,
        ease: 'Expo.easeOut',
        clearProps: 'all',
      });
    });
  });

  const heroElement = document.querySelector('.transformHero');
  const heroTextBox = document.querySelector('.transformTextBox');
  const heroContainer = document.querySelector('#inicio');
  gsap.fromTo(
    heroElement,
    {
      duration: 1,
      transform: 'translate3d(20%, 0%, 0px) scale3d(1, 0.65, 1)  rotateX(15deg) rotateY(-10deg) rotateZ(32deg) ',
    },

    {
      duration: 1,
      transform: 'translate3d(0%, -50%, 0px) scale3d(1, 1, 1)  rotateX(15deg) rotateY(0deg) rotateZ(0deg) ',
      scrollTrigger: {
        trigger: heroContainer,
        start: 'top',
        end: 800,
        scrub: true,
      },
    }
  );
  gsap.fromTo(
    heroTextBox,
    {
      width: '50vw',
      duration: 1,
    },

    {
      width: '0vw',
      duration: 1,
      scrollTrigger: {
        trigger: heroContainer,
        start: 'top',
        end: 800,
        scrub: true,
      },
    }
  );
</script>
