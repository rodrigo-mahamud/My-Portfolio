---
---

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  import { CSSPlugin } from 'gsap/CSSPlugin';
  import Lenis from '@studio-freight/lenis';

  const lenis = new Lenis({ infinite: false, duration: 1.5 });

  function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }

  requestAnimationFrame(raf);
  gsap.registerPlugin(CSSPlugin);
  gsap.registerPlugin(ScrollTrigger);

  const navGlow = document.querySelector('#navGlow');
  const navLinks = document.querySelectorAll('#header nav a');

  /*-----------------------*/
  /*------ NAV MENU ------ */
  /*-----------------------*/
  function getSectionIdsFromNavLinks() {
    return Array.from(navLinks)
      .map((link) => {
        const href = link.getAttribute('href');
        return href ? href.replace('#', '') : '';
      })
      .filter(Boolean); // Este filtro eliminará cualquier valor vacío
  }

  const sectionIDs = getSectionIdsFromNavLinks();

  function isVisible(el: Element): boolean {
    const rect = el.getBoundingClientRect();
    const windowHeight = window.innerHeight || document.documentElement.clientHeight;
    const isInView = rect.top <= windowHeight && rect.top + rect.height >= 0;
    return isInView;
  }

  function updateNavGlow() {
    let activeSectionIndex: number | null = null;

    for (let i = 0; i < sectionIDs.length; i++) {
      const element = document.getElementById(sectionIDs[i]);
      if (element && isVisible(element)) {
        activeSectionIndex = i;
        break;
      }
    }

    if (activeSectionIndex !== null && activeSectionIndex < navLinks.length) {
      const activeLink = navLinks[activeSectionIndex];
      if (activeLink.parentElement) {
        // Asegurarse de que parentElement no es null
        const linkRect = activeLink.getBoundingClientRect();
        const navRect = activeLink.parentElement.getBoundingClientRect();
        const navGlowPosition = linkRect.left - navRect.left + linkRect.width / 2;

        gsap.to(navGlow, {
          left: `${navGlowPosition}px`,
          duration: 0.5,
          overwrite: true,
          ease: 'Expo.easeOut',
        });

        navLinks.forEach((link, index) => {
          if (index === activeSectionIndex) {
            gsap.to(link, {
              color: '#fff',
              scale: 1.05,
              delay: 0.005,
              duration: 0.1,
              overwrite: true,
              ease: 'Expo.easeOut',
            });
          } else {
            gsap.to(link, {
              clearProps: 'all',
              duration: 0.1,
              ease: 'expo.in',
            });
          }
        });
      }
    }
  }

  document.addEventListener('DOMContentLoaded', updateNavGlow);
  window.addEventListener('scroll', updateNavGlow);

  document.addEventListener('DOMContentLoaded', () => {
    const elementsToAnimate: HTMLElement[] = Array.from(document.querySelectorAll('.animate-on-scroll'));

    elementsToAnimate.forEach((element: HTMLElement) => {
      const delay = element.getAttribute('data-delay') || '0';
      const easing = element.getAttribute('data-easing') || 'Expo.easeOut';
      const duration = element.getAttribute('data-duration') || '2.5';
      const type = element.getAttribute('data-type') || 'simple';

      let animationSettings = {};

      switch (type) {
        case 'simple':
          animationSettings = {
            opacity: 0,
            y: 50,
          };
          break;
        case 'zoomReversed':
          animationSettings = {
            opacity: 0,
            scale: 1.5,
          };
          break;
        case 'zoomSmall':
          animationSettings = {
            opacity: 0,
            scale: 0.9,
          };
          break;
      }

      gsap.from(element, {
        ...animationSettings,
        duration: parseFloat(duration),
        delay: parseFloat(delay),
        ease: easing,
        onStart: () => {
          element.style.visibility = 'visible';
        },
        scrollTrigger: {
          trigger: element,
          once: true,
          start: 'top 90%',
          // markers: true,

          onToggle: (self) => {
            if (!self.isActive) {
              const index = elementsToAnimate.indexOf(element);
              if (index > -1) {
                elementsToAnimate.splice(index, 1);
              }
            }
          },
        },
      });
    });
  });

  window.addEventListener('DOMContentLoaded', () => {
    const heroElementsToAnimate = document.querySelectorAll('.animate-on-scrollHero');

    heroElementsToAnimate.forEach((element, index) => {
      const delay = 0.65 + index * 0.15;
      gsap.from(element, {
        duration: 2.25,
        autoAlpha: 0,
        y: 100,
        delay: delay,
        ease: 'Expo.easeOut',
        clearProps: 'all',
      });
    });
  });

  const heroElement = document.querySelector('.transformHero');
  const heroTextBox = document.querySelector('.transformTextBox');
  const heroContainer = document.querySelector('#inicio');
  gsap.fromTo(
    heroElement,
    {
      duration: 1,
      transform: 'translate3d(20%, 0%, 0px) scale3d(1, 0.65, 1)  rotateX(15deg) rotateY(-10deg) rotateZ(32deg) ',
    },

    {
      duration: 1,
      transform: 'translate3d(0%, -50%, 0px) scale3d(1, 1, 1)  rotateX(15deg) rotateY(0deg) rotateZ(0deg) ',
      scrollTrigger: {
        trigger: heroContainer,
        start: 'top',
        end: 800,
        scrub: true,
      },
    }
  );
  gsap.fromTo(
    heroTextBox,
    {
      width: '50vw',
      duration: 1,
    },

    {
      width: '0vw',
      duration: 1,
      scrollTrigger: {
        trigger: heroContainer,
        start: 'top',
        end: 800,
        scrub: true,
      },
    }
  );
</script>
