---
import { SITE } from '~/config.mjs';
---

<script is:inline define:vars={{ defaultTheme: SITE.defaultTheme }}>
  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  if ((defaultTheme && defaultTheme.endsWith(':only')) || (!localStorage.theme && defaultTheme !== 'system')) {
    applyTheme(defaultTheme.replace(':only', ''));
  } else if (
    localStorage.theme === 'dark' ||
    (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
  ) {
    applyTheme('dark');
  } else {
    applyTheme('light');
  }

  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(event, (e) => fn(e, elem), false);
      });
    }
  }

  window.onload = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      document.getElementById('header')?.classList.toggle('h-screen');
      document.querySelector('#header nav')?.classList.toggle('hidden');
    });

    attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
      if (defaultTheme.endsWith(':only')) {
        return;
      }
      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    });

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url'));
      const text = encodeURIComponent(elem.getAttribute('data-aw-text'));

      let href;
      switch (network) {
        case 'facebook':
          href = `https://www.facebook.com/sharer.php?u=${url}`;
          break;
        case 'twitter':
          href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
          break;
        case 'linkedin':
          href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
          break;
        case 'whatsapp':
          href = `https://wa.me/?text=${text}%20${url}`;
          break;
        case 'mail':
          href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
          break;

        default:
          return;
      }

      const newlink = document.createElement('a');
      newlink.target = '_blank';
      newlink.href = href;
      newlink.click();
    });

    function appyHeaderStylesOnScroll() {
      const header = document.getElementById('header');
      if (lastKnownScrollPosition > 60 && !header.classList.contains('scroll')) {
        document.getElementById('header').classList.add('scroll');
      } else if (lastKnownScrollPosition <= 60 && header.classList.contains('scroll')) {
        document.getElementById('header').classList.remove('scroll');
      }
      ticking = false;
    }
    appyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          appyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });
  };

  window.onpageshow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    const elem = document.querySelector('[data-aw-toggle-menu]');
    if (elem) {
      elem.classList.remove('expanded');
    }
    document.body.classList.remove('overflow-hidden');
    document.getElementById('header')?.classList.remove('h-screen');
    document.querySelector('#header nav')?.classList.add('hidden');
  };
</script>

<script>
  import Scrollbar from 'smooth-scrollbar';

  const container = document.getElementById('scrollable-content');

  if (container !== null) {
    const options = {
      damping: 0.05,
      renderByPixel: true,
      continuousScrolling: true,
      alwaysShowTracks: false,
    };

    Scrollbar.init(container, options);
  } else {
    console.error('No se pudo encontrar el elemento con el ID "scrollable-content"');
  }
  let scrollbarTimeout: ReturnType<typeof setTimeout>;

  function fadeOutScrollbar(): void {
    const scrollbarTrack = document.querySelector('.scrollbar-track-y');
    if (scrollbarTrack && scrollbarTrack instanceof HTMLElement) {
      scrollbarTrack.classList.remove('show');
    }
  }

  function fadeInScrollbar(): void {
    const scrollbarTrack = document.querySelector('.scrollbar-track-y');
    if (scrollbarTrack && scrollbarTrack instanceof HTMLElement) {
      scrollbarTrack.classList.add('show');
    }
  }

  function resetScrollbarTimeout(): void {
    clearTimeout(scrollbarTimeout);
    fadeInScrollbar();
    scrollbarTimeout = setTimeout(fadeOutScrollbar, 2000); // 2 segundos
  }

  if (container) {
    container.addEventListener('mouseenter', fadeInScrollbar);
    container.addEventListener('mouseleave', fadeOutScrollbar);
    container.addEventListener('wheel', resetScrollbarTimeout);
  }

  resetScrollbarTimeout();

  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', function () {
    // Selecciona el elemento que representa la esfera y el filtro de desenfoque
    const esfera = document.getElementById('esfera');
    const motionBlurFilter = document.querySelector('#motionBlur feGaussianBlur');

    // Verifica si la esfera y el filtro de desenfoque existen en el DOM
    if (!esfera || !motionBlurFilter) {
      console.error('No se pudo encontrar la esfera o el filtro de desenfoque en el DOM.');
      return;
    }

    // Variables para almacenar las posiciones anteriores y actuales del ratón
    let mouseX = 0;
    let mouseY = 0;
    let prevMouseX = 0;
    let prevMouseY = 0;

    // Temporizador para detectar si el ratón se ha detenido
    let timer;

    // Crea una función para manejar el movimiento del ratón
    function moverEsfera(e) {
      // Limpia el temporizador existente
      clearTimeout(timer);

      // Actualiza las posiciones del ratón
      prevMouseX = mouseX;
      prevMouseY = mouseY;
      mouseX = e.clientX;
      mouseY = e.clientY;

      // Calcula la velocidad del movimiento del ratón
      const velocityX = mouseX - prevMouseX;
      const velocityY = mouseY - prevMouseY;
      const velocity = Math.sqrt(velocityX * velocityX + velocityY * velocityY);

      // Verifica si la esfera no es null antes de llamar a getBoundingClientRect
      const esferaRect = esfera && esfera.getBoundingClientRect();

      // Usa GSAP para actualizar la posición de la esfera con un delay
      if (esferaRect) {
        gsap.to(esfera, {
          x: mouseX - esferaRect.width / 2, // Ajusta la posición en X
          y: mouseY - esferaRect.height / 2, // Ajusta la posición en Y
          duration: 0.2,
          ease: 'ease.out',
        });
      }

      // Ajusta el efecto de desenfoque de movimiento según la velocidad del ratón
      const blurAmount = Math.min(velocity * 0.1, 5); // Aumenta el desenfoque y establece un límite máximo
      gsap.to(motionBlurFilter, {
        attr: {
          stdDeviation: `${blurAmount} ${blurAmount}`,
        },
        duration: 0.3,
        ease: 'ease.out',
      });

      // Detecta si el ratón se ha detenido y elimina el desenfoque
      timer = setTimeout(() => {
        gsap.to(motionBlurFilter, {
          attr: {
            stdDeviation: '0 0',
          },
          duration: 0.85,
          ease: 'ease.out',
        });
      }, 50);
    }

    // Aplica el filtro de desenfoque de movimiento a la esfera
    esfera.style.filter = 'url(#motionBlur)';

    // Agrega un evento 'mousemove' al documento para seguir la posición del ratón
    document.addEventListener('mousemove', moverEsfera);
  });

  function animateLoadingText() {
    const loadingTextContainer = document.getElementById('loading-text-container');

    if (loadingTextContainer) {
      // Coloca el contenedor en el centro
      loadingTextContainer.style.transform = 'translateY(0%)';

      // Animación de abajo hacia arriba para ocultar el texto
      gsap.to(loadingTextContainer, {
        y: '-100%',
        duration: 0.5, // Duración de la animación
        delay: 10, // Tiempo antes de que comience la animación de salida
        onComplete: () => {
          // Eliminar el contenedor del texto una vez que la animación haya terminado
          loadingTextContainer.remove();
        },
      });
    }
  }

  document.addEventListener('DOMContentLoaded', animateLoadingText);
  document.addEventListener('DOMContentLoaded', animateLoadingText);
</script>
