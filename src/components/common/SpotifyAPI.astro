<script>
  const clientId: string | undefined = import.meta.env.SECRET_CLIENT_ID;
  const clientSecret: string | undefined = import.meta.env.SECRET_CLIENT_SECRET;
  const refreshToken: string | undefined = import.meta.env.SECRET_REFRESH_TOKEN;
  let audioElement: HTMLAudioElement | null = null;
  let isFirstClick: boolean = true;

  async function getAccessToken(): Promise<string> {
    if (!clientId || !clientSecret || !refreshToken) {
      throw new Error('Faltan las credenciales de Spotify');
    }

    const response = await fetch('https://accounts.spotify.com/api/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        Authorization: 'Basic ' + btoa(clientId + ':' + clientSecret),
      },
      body: 'grant_type=refresh_token&refresh_token=' + refreshToken,
    });

    const data = await response.json();
    return data.access_token;
  }

  async function getNowPlaying(accessToken: string): Promise<void> {
    const response = await fetch(`https://api.spotify.com/v1/me/player/currently-playing`, {
      headers: {
        Authorization: 'Bearer ' + accessToken,
      },
    });

    if (response.status === 204) {
      updateUIForNoSong();
      return;
    }

    const data = await response.json();
    if (!data.item) {
      throw new Error('No se encontrÃ³ informaciÃ³n de la canciÃ³n');
    }

    updateUIWithSongData(data);
  }

  function updateUIForNoSong(): void {
    const trackNameElement = document.getElementById('track-name') as HTMLDivElement | null;
    const scardTitle = document.getElementById('scard-title') as HTMLDivElement | null;
    const defaultImage = document.getElementById('default-image') as HTMLImageElement | null;
    const albumCover = document.getElementById('album-cover') as HTMLImageElement | null;

    if (trackNameElement) trackNameElement.innerText = 'No hay nada sonando en mi Spotify ðŸ˜´';
    if (scardTitle) scardTitle.style.display = 'none';
    if (defaultImage) defaultImage.style.display = 'block';
    if (albumCover) albumCover.style.display = 'none';
  }

  function updateUIWithSongData(data: any): void {
    // Debes definir una interfaz para 'data' si conoces su estructura exacta
    const trackName = data.item.name;
    const artistName = data.item.artists[0].name;
    const albumCoverUrl = data.item.album.images[0].url;
    const trackUrl = data.item.external_urls.spotify;
    const previewUrl = data.item.preview_url;

    const trackNameElement = document.getElementById('track-name') as HTMLDivElement | null;
    const scardTitle = document.getElementById('scard-title') as HTMLDivElement | null;
    const defaultImage = document.getElementById('default-image') as HTMLImageElement | null;
    const albumCover = document.getElementById('album-cover') as HTMLImageElement | null;
    const trackLink = document.getElementById('track-link') as HTMLAnchorElement | null;

    if (trackNameElement) trackNameElement.innerText = `${trackName} - ${artistName}`;
    if (scardTitle) scardTitle.style.display = 'flex';
    if (defaultImage) defaultImage.style.display = 'none';
    if (albumCover) {
      albumCover.style.display = 'block';
      albumCover.src = albumCoverUrl;
    }
    if (trackLink) trackLink.href = trackUrl;

    setupAudioElement(previewUrl);
  }

  function setupAudioElement(previewUrl: string): void {
    if (audioElement) {
      audioElement.pause();
    }

    audioElement = new Audio(previewUrl);
    audioElement.volume = 0.125;

    const playPauseButton = document.getElementById('play-pause-button') as HTMLButtonElement | null;
    const playIcon = document.getElementById('play-icon') as HTMLElement | null;
    const pauseIcon = document.getElementById('pause-icon') as HTMLElement | null;

    setupPlayPauseButton(playPauseButton, playIcon, pauseIcon);
  }

  function setupPlayPauseButton(
    playPauseButton: HTMLButtonElement | null,
    playIcon: HTMLElement | null,
    pauseIcon: HTMLElement | null
  ): void {
    if (playPauseButton && playIcon && pauseIcon) {
      playPauseButton.onclick = function () {
        if (audioElement) {
          if (audioElement.paused) {
            audioElement.play();
            playIcon.style.display = 'none';
            pauseIcon.style.display = 'block';
          } else {
            audioElement.pause();
            playIcon.style.display = 'block';
            pauseIcon.style.display = 'none';
          }
        }
      };
    }

    setupAudioEvents(playIcon, pauseIcon);
  }

  function setupAudioEvents(playIcon: HTMLElement | null, pauseIcon: HTMLElement | null): void {
    if (!audioElement) return;

    audioElement.volume = 0.5;
    const progress = document.getElementById('progress') as HTMLDivElement | null;
    const progressBar = document.getElementById('progress-bar') as HTMLDivElement | null;

    audioElement.addEventListener('timeupdate', () => {
      if (progress && progressBar && audioElement) {
        const progressPercentage = audioElement.currentTime / audioElement.duration;
        progress.style.width = progressPercentage * progressBar.offsetWidth + 'px';
      }
    });

    audioElement.addEventListener('ended', () => {
      if (audioElement) {
        audioElement.currentTime = 0;
      }
      if (playIcon) playIcon.style.display = 'block';
      if (pauseIcon) pauseIcon.style.display = 'none';
    });
  }

  async function init(): Promise<void> {
    const sbutton = document.getElementById('sbutton') as HTMLButtonElement | null;
    if (sbutton) {
      sbutton.addEventListener('click', async () => {
        if (isFirstClick) {
          const accessToken = await getAccessToken();
          await getNowPlaying(accessToken);
          isFirstClick = false;
        }
      });
    }

    const accessToken = await getAccessToken();
    await getNowPlaying(accessToken);
    setInterval(async () => {
      if (!audioElement || (audioElement && audioElement.paused)) {
        await getNowPlaying(accessToken);
      }
    }, 60000); // Actualizar cada 60 segundos
  }

  init();
</script>
