<script>
  let audioElement: HTMLAudioElement | null = null;
  let isFirstClick: boolean = true;

  async function getNowPlaying(): Promise<void> {
    const response = await fetch('/.netlify/functions/spotifyHandler');
    if (!response.ok) {
      throw new Error('Error al obtener datos de Spotify');
    }
    const data = await response.json();

    const trackNameElement = document.getElementById('track-name') as HTMLDivElement | null;
    const scardTitle = document.getElementById('scard-title') as HTMLDivElement | null;
    const defaultImage = document.getElementById('default-image') as HTMLImageElement | null;
    const albumCover = document.getElementById('album-cover') as HTMLImageElement | null;
    const trackLink = document.getElementById('track-link') as HTMLAnchorElement | null;
    const playPauseButton = document.getElementById('play-pause-button') as HTMLButtonElement | null;
    const playIcon = document.getElementById('play-icon') as HTMLElement | null;
    const pauseIcon = document.getElementById('pause-icon') as HTMLElement | null;
    const progress = document.getElementById('progress') as HTMLDivElement | null;
    const progressBar = document.getElementById('progress-bar') as HTMLDivElement | null;

    if (!data.nowPlaying) {
      if (trackNameElement) trackNameElement.innerText = 'No hay nada sonando en mi Spotify ðŸ˜´';
      if (scardTitle) scardTitle.style.display = 'none';
      if (defaultImage) defaultImage.style.display = 'block';
      if (albumCover) albumCover.style.display = 'none';
      return;
    }

    const { item } = data.nowPlaying;
    if (trackNameElement) trackNameElement.innerText = `${item.name} - ${item.artists[0].name}`;
    if (scardTitle) scardTitle.style.display = 'flex';
    if (defaultImage) defaultImage.style.display = 'none';
    if (albumCover) {
      albumCover.style.display = 'block';
      albumCover.src = item.album.images[0].url;
    }
    if (trackLink) trackLink.href = item.external_urls.spotify;

    if (audioElement) {
      audioElement.pause();
    }

    audioElement = new Audio(item.preview_url);
    audioElement.volume = 0.125;

    if (playPauseButton) {
      playPauseButton.onclick = () => {
        if (audioElement) {
          if (audioElement.paused) {
            audioElement.play();
            if (playIcon) playIcon.style.display = 'none';
            if (pauseIcon) pauseIcon.style.display = 'block';
          } else {
            audioElement.pause();
            if (playIcon) playIcon.style.display = 'block';
            if (pauseIcon) pauseIcon.style.display = 'none';
          }
        }
      };
    }

    if (audioElement && progress && progressBar) {
      audioElement.volume = 0.5;
      audioElement.addEventListener('timeupdate', () => {
        if (audioElement) {
          const progressPercentage = audioElement.currentTime / audioElement.duration;
          progress.style.width = `${progressPercentage * progressBar.offsetWidth}px`;
        }
      });

      audioElement.addEventListener('ended', () => {
        if (audioElement) {
          audioElement.currentTime = 0;
        }
        if (playIcon) playIcon.style.display = 'block';
        if (pauseIcon) pauseIcon.style.display = 'none';
      });
    }
  }

  async function init() {
    const sbutton = document.getElementById('sbutton') as HTMLButtonElement | null;
    if (sbutton) {
      sbutton.addEventListener('click', async () => {
        if (isFirstClick) {
          await getNowPlaying();
          isFirstClick = false;
        }
      });
    }

    await getNowPlaying();
    setInterval(async () => {
      if (!audioElement || (audioElement && audioElement.paused)) {
        await getNowPlaying();
      }
    }, 60000);
  }

  init();
</script>
