---
---

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', () => {
    const navLinks = document.querySelectorAll('#header nav a');
    const sections = document.querySelectorAll('section');

    const observerOptions = {
      rootMargin: '-10% 0px -90% 0px',
    };

    function handleIntersection(entries, observer) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const targetLink = document.querySelector(`#header nav a[href="#${entry.target.id}"]`);

          // Cambia el color del enlace activo
          gsap.to(targetLink, {
            color: 'red', // Color deseado para el enlace activo
            duration: 0.3,
            overwrite: true,
          });

          // Restablece el color de los otros enlaces
          navLinks.forEach((link) => {
            if (link !== targetLink) {
              gsap.to(link, {
                color: '', // Color original
                duration: 0.3,
                overwrite: true,
              });
            }
          });
        }
      });
    }

    const observer = new IntersectionObserver(handleIntersection, observerOptions);

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Código de la animación de la esfera
    const esfera = document.getElementById('esfera');
    const welcome = document.getElementById('welcome');
    const motionBlurFilter = document.querySelector('#motionBlur feGaussianBlur');

    if (!esfera || !motionBlurFilter) {
      console.error('No se pudo encontrar la esfera o el filtro de desenfoque en el DOM.');
      return;
    }

    let mouseX = 0;
    let mouseY = 0;
    let prevMouseX = 0;
    let prevMouseY = 0;

    let timer;

    function moverEsfera(e) {
      clearTimeout(timer);

      prevMouseX = mouseX;
      prevMouseY = mouseY;
      mouseX = e.clientX;
      mouseY = e.clientY;

      const velocityX = mouseX - prevMouseX;
      const velocityY = mouseY - prevMouseY;
      const velocity = Math.sqrt(velocityX * velocityX + velocityY * velocityY);

      const esferaRect = esfera && esfera.getBoundingClientRect();

      if (esferaRect) {
        gsap.set(esfera, {
          opacity: 1,
          x: mouseX - esferaRect.width,
          y: mouseY - esferaRect.height / 1.5,
          duration: 0.2,
          ease: 'expo.out',
        });
      }

      const blurAmount = Math.min(velocity * 0.2, 5);
      gsap.to(motionBlurFilter, {
        attr: {
          stdDeviation: `${blurAmount} ${blurAmount}`,
        },
        duration: 0.3,
        ease: 'expo.out',
      });

      timer = setTimeout(() => {
        gsap.to(motionBlurFilter, {
          attr: {
            stdDeviation: '0 0',
          },
          duration: 0.85,
          ease: 'expo.out',
        });
      }, 50);
    }

    window.addEventListener('load', function () {
      setTimeout(function () {
        gsap.to(welcome, {
          scale: 0,
          opacity: 0,
          duration: 0.3,
          ease: 'expo.out',
        });
        gsap.to(esfera, {
          scale: 0.5,
          duration: 1,
          border: '2px solid #fff',
          background: 'transparent',
          ease: 'expo.out',
        });
        // Aplica el filtro de desenfoque de movimiento a la esfera
        esfera.style.filter = 'url(#motionBlur)';
      }, 750);
    });

    // Agrega un evento 'mousemove' al documento para seguir la posición del ratón
    document.addEventListener('mousemove', moverEsfera);
  });

  /*-----------------------*/
  /*----LOADING SCREEN---- */
  /*-----------------------*/
  function animateLoadingText() {
    const loadingTextContainer = document.getElementById('loading-text-container');

    if (loadingTextContainer) {
      // Coloca el contenedor en el centro
      loadingTextContainer.style.transform = 'translateY(0%)';

      // Animación de abajo hacia arriba para ocultar el texto
      gsap.to(loadingTextContainer, {
        y: '-100%',
        duration: 0.75,
        delay: 0.25,
        ease: 'expo.inOut',
        onComplete: () => {
          loadingTextContainer.remove();
        },
      });
    }
  }
  document.addEventListener('DOMContentLoaded', animateLoadingText);
</script>
