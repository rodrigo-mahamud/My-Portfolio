---
interface Item {
  title?: string;
  description?: string;
  icon?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  highlight?: string;
  items: Array<Item>;
}

const { items = [] } = Astro.props;
---

<section class="relative">
  <div class="absolute inset-0 pointer-events-none mb-32" aria-hidden="true"></div>
  <div class="relative max-w-5xl mx-auto -mb-12">
    <div class="py-4 pt-8 sm:py-6 lg:py-8 lg:pt-12">
      <div
        id="cards"
        class="grid gap-3 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 my-12 dark:text-white items-stretch"
      >
        {
          items.map(({ title, description }) => (
            <div class="card SAnimate relative flex flex-col border border-transparent ">
              <div class="card-content">
                <div class="card-image">
                  <img src="cardIMG.png" />
                </div>
                <div class="px-8 pb-6">
                  <h3 class="text-xl font-bold">{title}</h3>
                  {description && <h4 class="text-muted dark:text-gray-400 text-md mt-4" set:html={description} />}
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>
<script>
  interface ExtendedHTMLElement extends HTMLElement {
    style: CSSStyleDeclaration & {
      '--mouse-x': string;
      '--mouse-y': string;
    };
  }

  document.getElementById('cards')!.onmousemove = (e: MouseEvent) => {
    const cards = document.getElementsByClassName('card');

    for (const card of Array.from(cards) as ExtendedHTMLElement[]) {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      card.style.setProperty('--mouse-x', `${x}px`);
      card.style.setProperty('--mouse-y', `${y}px`);
    }
  };
</script>
