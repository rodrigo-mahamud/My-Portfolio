---
import SCard from './SCard.astro';
import SCardButton from './SCardButton.astro';

interface Link {
  text?: string;
  href?: string;
}

interface MenuLink extends Link {
  links?: Array<Link>;
}

export interface Props {
  links?: Array<MenuLink>;
  isHomePage?: boolean;
  back: any;
}

const { links = [], back, isHomePage } = Astro.props;
---

<header
  class="fixed flex justify-center items-center z-50 w-full max-w-[34rem] -translate-x-1/2 bottom-4 left-1/2"
  id="header"
>
  <div
    id="navContainer"
    style="border-radius: 2rem;"
    class={`border border-[#f2f2f21a]  shadow-[0_10px_25px_0_rgba(0,0,0,0.15)] flex items-center opacity-0 justify-end flex-row h-12 ${
      isHomePage
        ? 'w-[87.5%] backdrop-blur-xl border-[#f2f2f21a] bg-[#f2f2f20d]'
        : 'w-3/12 bg-[#0000000d] backdrop-blur-md border-[#f2f2f248]'
    } `}
  >
    {isHomePage && <SCard />}
    <div class="flex justify-center w-full h-full" id="navElementsContainer">
      <nav class="w-full items-center justify-evenly hidden md:flex md:h-auto z-30" aria-label="Main navigation">
        <div id="navGlow" class={`${isHomePage ? 'w-1/4 h-full -z-20 absolute -translate-x-1/2 navGlow' : 'hidden'}`}>
        </div>
        {
          !isHomePage ? (
            <a href={back.href} class="flex items-center hover:text-white" data-nav="animate">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="-rotate-90 mr-2"
                width="1.75rem"
                height="1.75rem"
                viewBox="0 0 24 24"
                stroke-width="1.8"
                stroke="currentColor"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M12 5l0 14" />
                <path d="M16 9l-4 -4" />
                <path d="M8 9l4 -4" />
              </svg>
              {back.text}
            </a>
          ) : (
            links.map(({ text, href }) => (
              <a
                class="navElements font-medium cursor-none text-slate-300 hover:text-white ease-in-out duration-300 py-3 flex items-center"
                data-strength=".75"
                href={href}
              >
                <div class="magnetic" data-strength=".75">
                  {text}
                </div>
              </a>
            ))
          )
        }
      </nav>

      {isHomePage && <SCardButton isHomePage={isHomePage} />}
    </div>
  </div>
</header>

<script>
  import { gsap } from 'gsap';

  const sbutton = document.getElementById('sbutton');
  const navContainer = document.getElementById('navContainer');
  const navElementsContainer = document.getElementById('navElementsContainer');
  const navElements = Array.from(document.getElementsByClassName('navElements'));
  const navGlow = document.getElementById('navGlow');
  const scard = document.getElementById('scard');
  const scardClose = document.getElementById('scardClose');
  const enlaces = document.querySelectorAll('[data-nav="animate"]');
  const main = document.querySelector('main');

  let isActive = false;

  if (navContainer && navGlow) {
    window.addEventListener('DOMContentLoaded', () => {
      let delay = 1.25;
      let duration = 1.5;
      if (window.scrollY > 800) {
        delay = 0;
        duration = 0;
      }
      if (navElements.length) {
        gsap.from(navContainer, {
          duration: duration,
          delay: delay,
          y: 100,
          ease: 'Expo.easeOut',
        });
        gsap.to(navContainer, { opacity: 1 });
      }
      if (!navElements.length) {
        gsap.from(navContainer, {
          duration: 1.5,
          delay: 0.15,
          y: 100,
          ease: 'Expo.easeOut',
        });
        gsap.to(navContainer, { opacity: 1 });
      }
      enlaces.forEach((enlace) => {
        enlace.addEventListener('click', (e) => {
          e.preventDefault();
          const destino = enlace.getAttribute('href');
          if (destino) {
            gsap.to(main, {
              duration: 0.75,
              filter: 'blur(15px)',
              opacity: 0,
              ease: 'power3.out',
              onComplete: () => {
                window.location.href = destino;
              },
            });
            gsap.to(navContainer, {
              duration: 0.5,
              opacity: 0,
              y: 50,
              ease: 'power3.in',
            });
          }
        });
      });
    });

    // Crear el Timeline para la apertura
    const openTimeline = gsap.timeline({
      paused: true,
      onStart: () => {
        isActive = true;
      },
      onReverseComplete: () => {
        isActive = false;
      },
    });

    openTimeline
      .to(navElementsContainer, {
        duration: 0.5,
        filter: 'blur(10px)',
        opacity: 0,
        ease: 'Expo.easeOut',
      })
      .to(
        navContainer,
        {
          duration: 1.25,
          height: '195px',
          width: '100%',
          borderRadius: '1rem',
          backdropFilter: 'blur(50px)',
          ease: 'Expo.easeOut',
        },
        '0'
      )
      .to(
        scard,
        {
          duration: 1.25,
          display: 'flex',
          opacity: 1,
          filter: 'blur(0px)',
          ease: 'Expo.easeOut',
        },
        '0'
      )
      .to(
        navGlow,
        {
          duration: 0.5,
          filter: 'blur(10px)',
          opacity: 0,
        },
        '0'
      )
      .to(
        scardClose,
        {
          duration: 1.25,
          opacity: 1,
          scale: 1,
          rotate: 270,
          ease: 'Expo.easeOut',
        },
        '0'
      );

    // Evento de clic para abrir
    sbutton?.addEventListener('click', () => {
      if (!isActive) {
        openTimeline.play();
      }
    });

    // Evento de clic para cerrar
    scardClose?.addEventListener('click', () => {
      if (isActive) {
        openTimeline.tweenTo(0, {
          delay: 0,
          duration: 0.75,
          ease: 'Expo.easeOut',
          onComplete: () => {
            gsap.to(scard, { clearProps: 'display' });
          },
        });
      }
    });
  }
</script>
