---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

const { images } = Astro.props;

const imageSources = import.meta.glob<{ default: ImageMetadata }>('/src/assets/images/hero/*.{jpeg,jpg,png,gif}');

const columns = Array.from({ length: 6 }, (_, i) => {
  const isEvenColumn = (i + 1) % 2 === 0;
  const start = i * 5;
  const end = isEvenColumn ? start + 6 : start + 5;
  return images.slice(start, end);
});
---

<style>
  .transformTextBox {
    box-shadow: 25px 0 144px -65px rgba(16, 24, 40, 0.25);
  }
  .heroShadow {
    background-color: transparent;
  }
  .heroShadow:after {
    content: '';
    position: absolute;
    width: 100%;

    box-shadow: 0px 95px 68px 175px #0a011800;
  }
  .coversh {
    box-shadow: 0px -80px 0px #0a0118;
  }
</style>

<section class="sticky-section h-[110vh] overflow-hidden" id="inicio" data-start="0" data-end="650">
  <div class="bg-[#0f0420] w-screen flex-col-reverse md:flex-row h-[110vh] heroShadow">
    <div
      class="w-full h-[40vh] md:w-[50vw] 4xl:w-[35vw] bg-[#0a0118] coversh md:h-[110vh] absolute z-10 transformTextBox overflow-hidden"
    >
      <div class="absolute bottom-14 md:h-2/5 px-4 md:px-14 md:pb-8 flex flex-col md:w-[50vw] 4xl:w-[35vw]">
        <h1
          id="tittleHero"
          class="text-white text-3xl md:text-5xl mb-6 font-semibold w-full translate-y-[50px] opacity-0 text-pretty"
        >
          Rodrigo Mahamud's portfolio. :)
        </h1>
        <h2 id="subtittleHero" class="w-full md:text-lg translate-y-[50px] opacity-0">
          UI kit and designss system for Figma in the world. Kickstart any project, save thousands of hours, and level
          up das.
        </h2>
      </div>
    </div>
    <div class="flex flex-row w-full px-2 md:px-0 min-h-max gap-4 md:gap-10 h-screen items-center transformHero">
      {
        columns.map((column) => (
          <div
            class="last:flex first:flex flex-col md:w-1/4 gap-y-10 opacity-0 hidden lg:flex lg:last:hidden lg:first:hidden 4xl:last:flex 4xl:first:flex"
            id="heroCardShadow"
          >
            {column.map((image) => {
              const imageSrc = imageSources[`/src/assets/images/hero/${image}`]();
              return (
                <Image
                  class="min-h-[12rem] md:min-h-[22rem] object-cover opacity-80"
                  alt="glad-os"
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  src={imageSrc}
                />
              );
            })}
          </div>
        ))
      }
    </div>
  </div>
</section>
<script>
  import { gsap } from 'gsap';
  document.addEventListener('DOMContentLoaded', () => {
    function isMobileDevice() {
      const userAgent = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      if (userAgent && window.innerWidth < 768) {
        return true;
      }
    }

    function initializeAnimations() {
      const heroElementsToAnimate = document.querySelectorAll('.animate-on-scrollHero');
      heroElementsToAnimate.forEach((element, index) => {
        const delay = 0.65 + index * 0.15;
        gsap.from(element, {
          duration: 2.25,
          autoAlpha: 0,
          y: 100,
          delay: delay,
          ease: 'Expo.easeOut',
          clearProps: 'all',
        });
      });

      const heroElement = document.querySelector('.transformHero');
      const heroTextBox = document.querySelector('.transformTextBox');
      const heroContainer = document.querySelector('#inicio');
      gsap.fromTo(
        heroElement,
        {
          duration: 1,
          transform: 'translate3d(20%, 0%, 0px) scale3d(1, 0.65, 1) rotateX(15deg) rotateY(-10deg) rotateZ(32deg)',
        },
        {
          duration: 1,
          transform: 'translate3d(0%, -50%, 0px) scale3d(1, 1, 1) rotateX(15deg) rotateY(0deg) rotateZ(0deg)',
          scrollTrigger: {
            trigger: heroContainer,
            start: 'top',
            end: 800,
            scrub: true,
          },
        }
      );
      gsap.fromTo(
        heroTextBox,
        {
          duration: 1,
        },
        {
          width: '0vw',
          duration: 1,
          scrollTrigger: {
            trigger: heroContainer,
            start: 'top',
            end: 800,
            scrub: true,
          },
        }
      );
    }

    // Ejecutar al inicio
    if (!isMobileDevice()) {
      initializeAnimations();
    }

    // Revisar al redimensionar
    window.addEventListener('resize', () => {
      if (!isMobileDevice()) {
        initializeAnimations();
      }
    });

    // obtener todas las columnas de las imágenes
    const columns = Array.from(document.querySelectorAll('#heroCardShadow'));
    const title = document.getElementById('tittleHero');
    const subtitle = document.getElementById('subtittleHero');

    columns.forEach((column) => {
      // generar una duración aleatoria entre 4 y 6 para la animación inicial
      const randomDurationInitial = Math.random() * (5 - 3) + 3;
      // generar una duración aleatoria entre 10 y 20 para la animación repetitiva
      const randomDurationIdle = Math.random() * (15 - 7) + 10;

      gsap.to(title, {
        y: 0,
        duration: 2.25,
        opacity: 1,
        delay: 0.75,
        ease: 'Expo.easeOut',
      });
      gsap.to(subtitle, {
        y: 0,
        duration: 2.25,
        delay: 1,
        opacity: 1,
        ease: 'Expo.easeOut',
      });
      const tl = gsap.timeline();
      // Primera animación al cargar
      tl.fromTo(
        column,
        {
          y: -800,
        },
        {
          y: -150,
          delay: 0.15,
          opacity: 1,
          ease: 'Expo.easeOut',
          duration: randomDurationInitial,
        }
      ).to(column, {
        duration: randomDurationIdle,
        delay: 0,
        translateY: 0,
        repeat: -1,
        yoyo: true,
        ease: 'Expo.easeInOut',
      });
    });
  });
</script>
