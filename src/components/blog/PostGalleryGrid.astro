---
// Importaciones y definición de propiedades
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

const { mediaFiles } = Astro.props;

// Asegurar que images y videos sean arrays iterables
const images = Array.isArray(mediaFiles.images) ? mediaFiles.images : [];
const videos = Array.isArray(mediaFiles.videos) ? mediaFiles.videos : [];

// Combinar y transformar rutas de imágenes y vídeos
const unifiedMediaPaths = [...images, ...videos];

// Importar metadatos de imágenes
const imageSources = import.meta.glob<{ default: ImageMetadata }>('/src/assets/images/*.{jpeg,jpg,png,gif}');
---

<!-- Renderizado condicional basado en el tipo de archivo -->
<div id="cards" class="grid grid-cols-5 grid-rows-12 gap-6 h-[185vh] mt-16">
  {
    unifiedMediaPaths.map((mediaItem, index) => {
      const isImage =
        mediaItem.path.endsWith('.jpg') ||
        mediaItem.path.endsWith('.jpeg') ||
        mediaItem.path.endsWith('.png') ||
        mediaItem.path.endsWith('.gif');
      const mediaSrc = isImage ? imageSources[mediaItem.path]() : mediaItem.path;

      const spanClass = [
        'col-span-3 row-span-4',
        'col-span-2 row-span-4 col-start-4',
        'col-span-2 row-span-4 row-start-5',
        'col-span-3 row-span-4 col-start-3 row-start-5',
        'col-span-5 row-span-4 row-start-9',
      ][index % 5];

      return (
        <div
          data-type="simple"
          data-delay={`${0.25 + index * 0.1}`}
          data-duration="2.5"
          data-easing="Expo.easeOut"
          class={`animate-on-scroll bento custom-mouse ${spanClass}`}
          data-typemouse="link"
        >
          <div class="flex flex-col bento-content h-full w-full rounded-xl overflow-hidden">
            <div class="flex flex-col items-start justify-start pt-8 px-8 text-start">
              <p class="text-white font-semibold mb-2">{mediaItem.title}</p>
              <p class=" text-gray-400 ">{mediaItem.subtitle}</p>
            </div>
            <div class=" flex m-8 h-full overflow-hidden">
              {isImage ? (
                <Image class="rounded-xl" alt="Imagen" src={mediaSrc} loading="lazy" decoding="async" />
              ) : (
                <video class="object-cover h-full w-full rounded-md" src={mediaSrc} autoplay muted playsinline loop />
              )}
            </div>
          </div>
        </div>
      );
    })
  }
</div>
