---
import { Image } from 'astro:assets';
import { getFormattedDate } from '~/utils/utils';
import type { Post } from '~/types';
import Bento from './Bento.astro';

export interface Props {
  post: Post;
  url: string | URL;
}

const { post } = Astro.props;

function darkenColor(color, amount) {
  let [r, g, b, a] = color.match(/\d+/g).map(Number);
  r = Math.floor(r * amount);
  g = Math.floor(g * amount);
  b = Math.floor(b * amount);
  return `rgba(${r}, ${g}, ${b}, ${a - 0.25})`;
}

const adjustedColor1 = darkenColor(post.accentColor, 0.5);
---

<style>
  .bg-accentColor {
    background: radial-gradient(
      95% 100% at 50% 0%,
      var(--gradient-base-color) 0%,
      var(--adjusted-color1) 50%,
      transparent 100%
    );
    opacity: 0;
    animation: fadeInOut 0.75s cubic-bezier(0.26, 1, 0.48, 1) forwards 0.75s;
  }
  .postHeaderFont {
    background-image: linear-gradient(to bottom, #fff 50%, transparent);
    text-shadow: 0 5px 15px var(--gradient-base-color) 0%, 0 -5px 15px rgba(255, 90, 0, 0.15),
      0 -5px 25px rgba(255, 255, 255, 0.25);
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
    background-clip: text;
  }
  @keyframes fadeInOut {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
</style>
<section class="w-full h-full">
  <div
    class="bg-accentColor absolute w-full h-full"
    style={{
      '--gradient-base-color': post.accentColor,
      '--adjusted-color1': adjustedColor1,
    }}
  >
  </div>
  <article class="opacity-0 blur-lg max-w-6xl mx-auto">
    <header class="w-full h-full pt-28">
      <div class="flex justify-between flex-col pb-16 mt-0 mb-2 px-4 sm:px-6 sm:items-center">
        <h1
          class="postHeaderFont px-4 text-[80px] mx-auto font-medium tracking-tighter leading-snug animate-on-scroll"
          data-type="simple"
          data-delay="0"
          data-duration="2.5"
          data-easing="Expo.easeOut"
          style={{
            '--gradient-base-color': post.accentColor,
            '--adjusted-color1': adjustedColor1,
          }}
        >
          {post.title}
        </h1>
        <p class="animate-on-scroll" data-type="simple" data-delay="0" data-duration="2.5" data-easing="Expo.easeOut">
          <time class="opacity-50 text-white" datetime={String(post.publishDate)}
            >{getFormattedDate(post.publishDate)}</time
          >
        </p>
      </div>
      {
        post.image ? (
          <>
            <Image
              class="max-w-full w-full mx-auto mb-6 sm:rounded-md bg-gray-400 dark:bg-slate-700 animate-on-scroll"
              src={post.image}
              widths={[275, 475, 575, 1050, 1250]}
              sizes={`(max-width: 550px) 275px, (max-width: 750px) 475px, (max-width: 950px) 575px,(max-width: 1920px) 1050px, (max-width: 2560px) 1250px,`}
              quality={'mid'}
              format="avif"
              loading="lazy"
              decoding="async"
              alt={`Imagen del ${post.title}`}
            />
          </>
        ) : (
          <div class=" mx-auto px-4 sm:px-6">
            <div class="border-t dark:border-slate-700" />
          </div>
        )
      }
    </header>
    <div class="mx-auto mt-8">
      {post.Content && <post.Content />}
    </div>
  </article>
</section>
<script>
  import { gsap } from 'gsap';
  const article = document.querySelector('article');

  gsap.to(article, {
    duration: 1,

    filter: 'blur(0px)',
    opacity: 1,
    ease: 'power3.out',
  });
</script>
